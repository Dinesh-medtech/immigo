name: ecs Pipeline

on:
  workflow_call:
    inputs:
      AWSDefaultRegion:
        required: true
        type: string
      EnvironmentName:
        required: true
        type: string
      ProjectName:
        required: true
        type: string
      parameters:
        required: false
        type: string
      # S3BucketName:
      #   required: false
      #   type: string
      SmallCaseEnvironment:
        required: true
        type: string
      # RestrictedEmaildomain:
      #   required: true
      #   type: string

jobs:
  Deploy_Infra:
    runs-on: ubuntu-latest
    environment: "Development"
    env:
      AWS_DEFAULT_REGION: ${{ inputs.AWSDefaultRegion }}
      ENV: ${{ inputs.EnvironmentName }}
      SMALLCASEENV: ${{ inputs.SmallCaseEnvironment }}
      PROJECT_NAME: ${{ inputs.ProjectName }}
      PARAMETERS: ${{ inputs.parameters }}
      # RestrictedEmaildomain: ${{ inputs.RestrictedEmaildomain }}

      AWS_SECRET_ACARIN_OIDC_ROLE: "${{ secrets.AWS_SECRET_ACARIN_OIDC_ROLE }}"
      API_BASE_URL: "${{ secrets.API_BASE_URL }}"

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Application Repo
        uses: actions/checkout@v4

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Install Node.js Dependencies and Build Frontend
        run: |
          cd packages/frontend
          npm install --legacy-peer-deps
          npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_SECRET_ACARIN_OIDC_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-session-name: "GitHubActions"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Repository
        uses: int128/create-ecr-repository-action@v1
        id: create-ecr-repo
        with:
          repository: ${{ inputs.ProjectName }}-frontend
          public: false

      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPO_NAME: ${{ steps.create-ecr-repo.outputs.repository-uri }}
        run: |
          cd packages/frontend
          docker build -f Dockerfile --build-arg NEXT_PUBLIC_API_BASE_URL=${{ env.API_BASE_URL }} \
            # --build-arg NEXT_PUBLIC_RESTRICTED_EMAIL_DOMAINS=${{ env.RestrictedEmaildomain }} \
            --build-arg NODE_ENV=${{ env.SMALLCASEENV }} \
            -t $REPO_NAME:$IMAGE_TAG .
          docker push $REPO_NAME:$IMAGE_TAG
          echo "image=$REPO_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy Cloudformation template
        run: |
            sam deploy --stack-name ${{ env.PROJECT_NAME }}-${{env.ENV}}\
              --region ${{env.AWS_DEFAULT_REGION}} \
              --no-disable-rollback \
              --no-confirm-changeset \
              --resolve-s3 \
              --no-fail-on-empty-changeset \
              --parameter-overrides 'ProjectName=${{inputs.PROJECT_NAME}} latestImageUri=${{ steps.build-image.outputs.image }}' \
              --tags CreatedBy=Acabot-DB \
              --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM

      
