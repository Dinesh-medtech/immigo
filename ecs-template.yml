AWSTemplateFormatVersion: "2010-09-09"
Description: >
  ECS Cluster Template
  Author: Your Name

Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String
  ProjectName:
    Description: Project Name
    Type: String
  VpcId:
    Description: VPC ID where ECS Cluster will be deployed
    Type: String
  SubnetIds:
    Description: Subnets where ECS tasks will run
    Type: CommaDelimitedList
  DesiredTaskCount:
    Description: Number of tasks to run
    Type: Number
    Default: 1
  InstanceType:
    Description: EC2 Instance Type for ECS Instances
    Type: String
    Default: t3.medium
  ContainerImage:
    Description: Docker container image for the ECS task
    Type: String
  ContainerPort:
    Description: Port on which container listens
    Type: Number
    Default: 80

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-${EnvironmentName}-cluster"

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${EnvironmentName}-ecs-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Containers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "SG-${ProjectName}-ECS-Container-${EnvironmentName}"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-${EnvironmentName}-task"
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: !Sub "${ProjectName}-container"
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ProjectName}-${EnvironmentName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: !Ref DesiredTaskCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ECSContainerSecurityGroup
          AssignPublicIp: ENABLED
      ServiceName: !Sub "${ProjectName}-${EnvironmentName}-service"
      LoadBalancers:
        - ContainerName: !Sub "${ProjectName}-container"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-${EnvironmentName}-alb"
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ECSContainerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-alb"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-${EnvironmentName}-tg"
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: "200"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-tg"

  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${EnvironmentName}-ecs-autoscaling-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                Resource: "*"

  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ProjectName}-${EnvironmentName}-autoscaling-policy"
      PolicyType: TargetTrackingScaling
      ResourceId: !Sub "service/${ECSCluster}/${ECSService}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
