org: iamvignesh
app: acabot
service: acabot
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  versionFunctions: false
  stage: ${opt:stage, 'dev'}  # Default to 'dev' if no stage is specified
  stackName: acabot-api-Lambda-${opt:stage, 'dev'}  # Dynamic stack name
  http:
    cors: true

functions:
  helloWorld:
    handler: handler.hello_world
    timeout: 30
    events:
      - http:
          path: /hello
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - access-control-allow-origin
            allowCredentials: false
    role: LambdaRole
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds: !Split [",", Fn::ImportValue: Aca-Subnets-NonProd]   

resources:
  Resources:
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: Acabot-Lambda-Role-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: VPCPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Effect: Allow
                  Resource:
                    - "*"
          - PolicyName: LoggingPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:PutRetentionPolicy
                    - logs:DeleteRetentionPolicy
                  Effect: Allow
                  Resource:
                    - !Sub arn:aws:logs:*:*:*

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Sub Security Group for acabot API
        GroupName: !Sub SG-Acabot-Lambda-${opt:stage, 'dev'}
        VpcId: !ImportValue Aca-vpcId-NonProd
        SecurityGroupIngress:
          - IpProtocol: "TCP"
            FromPort: 443
            ToPort: 443
            CidrIp: 10.1.0.0/16
        SecurityGroupEgress:
          - IpProtocol: "TCP"
            FromPort: 443
            ToPort: 443
            CidrIp: 10.1.0.0/16
          - IpProtocol: "TCP"
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: "-1"
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
          - IpProtocol: "TCP"
            FromPort: 5432
            ToPort: 5432
            CidrIp: 10.1.0.0/16
        Tags:
          - Key: Name
            Value: !Sub Acabot-Lambda-SG
